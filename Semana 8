using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;

class Asiento
{
    public int Numero { get; set; }
    public bool Ocupado { get; set; }
    public string? NombreOcupante { get; set; }

    public Asiento(int numero)
    {
        Numero = numero;
        Ocupado = false;
        NombreOcupante = null;
    }
}

class Auditorio
{
    private Queue<string> colaDeEspera = new Queue<string>();
    private List<Asiento> asientos = new List<Asiento>();
    private object lockObj = new object();

    public Auditorio(int capacidad)
    {
        for (int i = 1; i <= capacidad; i++)
        {
            asientos.Add(new Asiento(i));
        }
    }

    public void AgregarPersona(string nombre)
    {
        lock (lockObj)
        {
            colaDeEspera.Enqueue(nombre);
            Console.WriteLine($"{nombre} se ha agregado a la cola de espera.");
        }
    }

    public void AsignarAsiento()
    {
        while (true)
        {
            string persona;
            lock (lockObj)
            {
                if (colaDeEspera.Count == 0)
                {
                    break; // Salir si no hay más personas en la cola
                }
                persona = colaDeEspera.Dequeue();
            }

            // Buscar un asiento libre
            for (int i = 0; i < asientos.Count; i++)
            {
                lock (lockObj)
                {
                    if (!asientos[i].Ocupado)
                    {
                        asientos[i].Ocupado = true;
                        asientos[i].NombreOcupante = persona;
                        Console.WriteLine($"{persona} ha sido asignado al asiento #{asientos[i].Numero}");
                        break; // Salir del bucle una vez que se asigna el asiento
                    }
                }
            }

            Thread.Sleep(100); // Simula un pequeño retraso en la asignación
        }
    }

    public void MostrarAsientos()
    {
        foreach (var asiento in asientos)
        {
            string estado = asiento.Ocupado ? $"Ocupado por {asiento.NombreOcupante}" : "Libre";
            Console.WriteLine($"Asiento {asiento.Numero}: {estado}");
        }
    }

    public void GenerarReporte()
    {
        Console.WriteLine("\n--- Reporte de Asientos ---");
        MostrarAsientos();
        Console.WriteLine("\nTotal de asientos ocupados: " + asientos.FindAll(a => a.Ocupado).Count);
        Console.WriteLine("Total de asientos libres: " + asientos.FindAll(a => !a.Ocupado).Count);
    }
}

class Program
{
    static void Main()
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();

        Auditorio auditorio = new Auditorio(100);
        Thread registro1 = new Thread(() =>
        {
            for (int i = 1; i <= 50; i++)
            {
                auditorio.AgregarPersona($"Persona_{i}");
                Thread.Sleep(50);
            }
        });

        Thread registro2 = new Thread(() =>
        {
            for (int i = 51; i <= 100; i++)
            {
                auditorio.AgregarPersona($"Persona_{i}");
                Thread.Sleep(50);
            }
        });

        registro1.Start();
        registro2.Start();

        Thread asignador = new Thread(auditorio.AsignarAsiento);
        asignador.Start();

        registro1.Join();
        registro2.Join();
        asignador.Join();

        stopwatch.Stop();
        Console.WriteLine("\nEstado final de los asientos:");
        auditorio.MostrarAsientos();
        auditorio.GenerarReporte();
        Console.WriteLine($"\nTiempo de ejecución: {stopwatch.ElapsedMilliseconds} ms");
        
        Console.WriteLine("\n--- Análisis de Estructura de Datos ---");
        Console.WriteLine("Se utilizó una Queue para manejar la cola de espera en orden FIFO, lo que permite un acceso eficiente a los asistentes en orden de llegada. También se usó una lista para almacenar los asientos, permitiendo acceso rápido a su estado.");
        Console.WriteLine("Ventajas: Eficiencia en la asignación y consulta. Desventajas: No permite acceso aleatorio a la cola de espera.");
        
        Console.WriteLine("\nAgente de IA utilizado: ChatGPT");
        Console.WriteLine("Porcentaje de código generado con IA: Aproximadamente 50%");
    }
}
